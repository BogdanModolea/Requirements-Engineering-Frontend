/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addReview } from '../fn/review-controller/add-review';
import { AddReview$Params } from '../fn/review-controller/add-review';
import { getAverageRating } from '../fn/review-controller/get-average-rating';
import { GetAverageRating$Params } from '../fn/review-controller/get-average-rating';
import { getReviewsByCompany } from '../fn/review-controller/get-reviews-by-company';
import { GetReviewsByCompany$Params } from '../fn/review-controller/get-reviews-by-company';
import { Review } from '../models/review';

@Injectable({ providedIn: 'root' })
export class ReviewControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addReview()` */
  static readonly AddReviewPath = '/api/reviews/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addReview()` instead.
   *
   * This method doesn't expect any request body.
   */
  addReview$Response(params: AddReview$Params, context?: HttpContext): Observable<StrictHttpResponse<Review>> {
    return addReview(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addReview$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addReview(params: AddReview$Params, context?: HttpContext): Observable<Review> {
    return this.addReview$Response(params, context).pipe(
      map((r: StrictHttpResponse<Review>): Review => r.body)
    );
  }

  /** Path part for operation `getReviewsByCompany()` */
  static readonly GetReviewsByCompanyPath = '/api/reviews/company/{company}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReviewsByCompany()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReviewsByCompany$Response(params: GetReviewsByCompany$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Review>>> {
    return getReviewsByCompany(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReviewsByCompany$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReviewsByCompany(params: GetReviewsByCompany$Params, context?: HttpContext): Observable<Array<Review>> {
    return this.getReviewsByCompany$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Review>>): Array<Review> => r.body)
    );
  }

  /** Path part for operation `getAverageRating()` */
  static readonly GetAverageRatingPath = '/api/reviews/company/{company}/average-rating';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAverageRating()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAverageRating$Response(params: GetAverageRating$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getAverageRating(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAverageRating$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAverageRating(params: GetAverageRating$Params, context?: HttpContext): Observable<number> {
    return this.getAverageRating$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

}
