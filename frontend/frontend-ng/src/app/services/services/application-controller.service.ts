/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { acceptApplication } from '../fn/application-controller/accept-application';
import { AcceptApplication$Params } from '../fn/application-controller/accept-application';
import { Application } from '../models/application';
import { applyForInternship } from '../fn/application-controller/apply-for-internship';
import { ApplyForInternship$Params } from '../fn/application-controller/apply-for-internship';
import { getApplicationsByInternship } from '../fn/application-controller/get-applications-by-internship';
import { GetApplicationsByInternship$Params } from '../fn/application-controller/get-applications-by-internship';
import { getApplicationsByUser } from '../fn/application-controller/get-applications-by-user';
import { GetApplicationsByUser$Params } from '../fn/application-controller/get-applications-by-user';
import { rejectApplication } from '../fn/application-controller/reject-application';
import { RejectApplication$Params } from '../fn/application-controller/reject-application';

@Injectable({ providedIn: 'root' })
export class ApplicationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `rejectApplication()` */
  static readonly RejectApplicationPath = '/api/applications/reject/{applicationId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rejectApplication()` instead.
   *
   * This method doesn't expect any request body.
   */
  rejectApplication$Response(params: RejectApplication$Params, context?: HttpContext): Observable<StrictHttpResponse<Application>> {
    return rejectApplication(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rejectApplication$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rejectApplication(params: RejectApplication$Params, context?: HttpContext): Observable<Application> {
    return this.rejectApplication$Response(params, context).pipe(
      map((r: StrictHttpResponse<Application>): Application => r.body)
    );
  }

  /** Path part for operation `applyForInternship()` */
  static readonly ApplyForInternshipPath = '/api/applications/apply';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `applyForInternship()` instead.
   *
   * This method doesn't expect any request body.
   */
  applyForInternship$Response(params: ApplyForInternship$Params, context?: HttpContext): Observable<StrictHttpResponse<Application>> {
    return applyForInternship(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `applyForInternship$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  applyForInternship(params: ApplyForInternship$Params, context?: HttpContext): Observable<Application> {
    return this.applyForInternship$Response(params, context).pipe(
      map((r: StrictHttpResponse<Application>): Application => r.body)
    );
  }

  /** Path part for operation `acceptApplication()` */
  static readonly AcceptApplicationPath = '/api/applications/accept/{applicationId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `acceptApplication()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptApplication$Response(params: AcceptApplication$Params, context?: HttpContext): Observable<StrictHttpResponse<Application>> {
    return acceptApplication(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `acceptApplication$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptApplication(params: AcceptApplication$Params, context?: HttpContext): Observable<Application> {
    return this.acceptApplication$Response(params, context).pipe(
      map((r: StrictHttpResponse<Application>): Application => r.body)
    );
  }

  /** Path part for operation `getApplicationsByUser()` */
  static readonly GetApplicationsByUserPath = '/api/applications/user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getApplicationsByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApplicationsByUser$Response(params: GetApplicationsByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Application>>> {
    return getApplicationsByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getApplicationsByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApplicationsByUser(params: GetApplicationsByUser$Params, context?: HttpContext): Observable<Array<Application>> {
    return this.getApplicationsByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Application>>): Array<Application> => r.body)
    );
  }

  /** Path part for operation `getApplicationsByInternship()` */
  static readonly GetApplicationsByInternshipPath = '/api/applications/internship/{internshipId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getApplicationsByInternship()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApplicationsByInternship$Response(params: GetApplicationsByInternship$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Application>>> {
    return getApplicationsByInternship(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getApplicationsByInternship$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApplicationsByInternship(params: GetApplicationsByInternship$Params, context?: HttpContext): Observable<Array<Application>> {
    return this.getApplicationsByInternship$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Application>>): Array<Application> => r.body)
    );
  }

}
