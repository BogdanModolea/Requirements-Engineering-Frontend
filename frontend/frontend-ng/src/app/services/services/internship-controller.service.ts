/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAllInternships } from '../fn/internship-controller/get-all-internships';
import { GetAllInternships$Params } from '../fn/internship-controller/get-all-internships';
import { getInternshipById } from '../fn/internship-controller/get-internship-by-id';
import { GetInternshipById$Params } from '../fn/internship-controller/get-internship-by-id';
import { Internship } from '../models/internship';
import { saveInternship } from '../fn/internship-controller/save-internship';
import { SaveInternship$Params } from '../fn/internship-controller/save-internship';

@Injectable({ providedIn: 'root' })
export class InternshipControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveInternship()` */
  static readonly SaveInternshipPath = '/api/internship/saveInternship';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveInternship()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveInternship$Response(params: SaveInternship$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return saveInternship(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveInternship$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveInternship(params: SaveInternship$Params, context?: HttpContext): Observable<void> {
    return this.saveInternship$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getInternshipById()` */
  static readonly GetInternshipByIdPath = '/api/internship/viewInternship/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getInternshipById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInternshipById$Response(params: GetInternshipById$Params, context?: HttpContext): Observable<StrictHttpResponse<Internship>> {
    return getInternshipById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getInternshipById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInternshipById(params: GetInternshipById$Params, context?: HttpContext): Observable<Internship> {
    return this.getInternshipById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Internship>): Internship => r.body)
    );
  }

  /** Path part for operation `getAllInternships()` */
  static readonly GetAllInternshipsPath = '/api/internship/listInternships';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllInternships()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllInternships$Response(params: GetAllInternships$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Internship>>> {
    return getAllInternships(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllInternships$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllInternships(params: GetAllInternships$Params, context?: HttpContext): Observable<Array<Internship>> {
    return this.getAllInternships$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Internship>>): Array<Internship> => r.body)
    );
  }

}
