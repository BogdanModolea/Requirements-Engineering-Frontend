/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addUser } from '../fn/user-controller/add-user';
import { AddUser$Params } from '../fn/user-controller/add-user';
import { authenticateAndGetToken } from '../fn/user-controller/authenticate-and-get-token';
import { AuthenticateAndGetToken$Params } from '../fn/user-controller/authenticate-and-get-token';
import { getUserInfo } from '../fn/user-controller/get-user-info';
import { GetUserInfo$Params } from '../fn/user-controller/get-user-info';
import { StringDto } from '../models/string-dto';
import { updateUrls } from '../fn/user-controller/update-urls';
import { UpdateUrls$Params } from '../fn/user-controller/update-urls';
import { UserInfo } from '../models/user-info';

@Injectable({ providedIn: 'root' })
export class UserControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addUser()` */
  static readonly AddUserPath = '/api/user/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addUser$Response(params: AddUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return addUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addUser(params: AddUser$Params, context?: HttpContext): Observable<void> {
    return this.addUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authenticateAndGetToken()` */
  static readonly AuthenticateAndGetTokenPath = '/api/user/authenticate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authenticateAndGetToken()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authenticateAndGetToken$Response(params: AuthenticateAndGetToken$Params, context?: HttpContext): Observable<StrictHttpResponse<StringDto>> {
    return authenticateAndGetToken(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authenticateAndGetToken$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authenticateAndGetToken(params: AuthenticateAndGetToken$Params, context?: HttpContext): Observable<StringDto> {
    return this.authenticateAndGetToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<StringDto>): StringDto => r.body)
    );
  }

  /** Path part for operation `updateUrls()` */
  static readonly UpdateUrlsPath = '/api/user/{userId}/update-urls';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUrls()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateUrls$Response(params: UpdateUrls$Params, context?: HttpContext): Observable<StrictHttpResponse<UserInfo>> {
    return updateUrls(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUrls$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateUrls(params: UpdateUrls$Params, context?: HttpContext): Observable<UserInfo> {
    return this.updateUrls$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserInfo>): UserInfo => r.body)
    );
  }

  /** Path part for operation `getUserInfo()` */
  static readonly GetUserInfoPath = '/api/user/getUserInfo/{username}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserInfo()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserInfo$Response(params: GetUserInfo$Params, context?: HttpContext): Observable<StrictHttpResponse<UserInfo>> {
    return getUserInfo(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserInfo$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserInfo(params: GetUserInfo$Params, context?: HttpContext): Observable<UserInfo> {
    return this.getUserInfo$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserInfo>): UserInfo => r.body)
    );
  }

}
